services:
  aibuilder-frontend:
    image: aibuilder-frontend:latest
    container_name: aibuilder-frontend
    build: ./frontend
    restart: always
    ports:
      - "3000:3000"
    networks:
      - aibuilder-network

  aibuilder-backend:
    image: aibuilder-backend:latest
    container_name: aibuilder-backend
    build: ./backend
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      aibuilder-db:
        condition: service_healthy
      redis-db:
        condition: service_healthy
    networks:
      - aibuilder-network

  aibuilder-db:
    image: postgres:latest
    container_name: aibuilder-postgres
    restart: always
    ports:
      - "5434:5434"
    environment:
      - 'POSTGRES_DB=aibuilderdb'
      - 'POSTGRES_PASSWORD=root'
      - 'POSTGRES_USER=postgres'
    healthcheck:
      test: pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB
      interval: 10s
      timeout: 5s
      start_period: 10s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - aibuilder-network

  redis-db:
    image: redis:latest
    container_name: aibuilder-redis
    restart: always
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: redis-cli ping
      interval: 10s
      timeout: 5s
      start_period: 10s
      retries: 5
    networks:
      - aibuilder-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - aibuilder-network

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      zookeeper:
        condition: service_started
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    healthcheck:
      test: [ "CMD", "bash", "-c", "kafka-topics --bootstrap-server kafka:9092 --list >/dev/null 2>&1" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    networks:
      - aibuilder-network
  
  prompt-generator:
    build: ./robot
    container_name: prompt-generator
    restart: always
    depends_on:
      zookeeper:
        condition: service_started
      kafka:
        condition: service_healthy
    networks:
      - aibuilder-network

volumes:
  redis_data:
  postgres_data:

networks:
  aibuilder-network:
    driver: bridge
